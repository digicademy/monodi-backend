<?php

namespace Digitalwert\Symfony2\Bundle\Monodi\CommonBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gedmo\Exception\InvalidArgumentException;
use Gedmo\Tool\Wrapper\EntityWrapper;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Digitalwert\Symfony2\Bundle\Monodi\CommonBundle\EventListener\DoctrineCacheEventListener as MonodiCache;

/**
 * FolderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FolderRepository extends NestedTreeRepository
{

    /**
     * Gibt einen QueryBuilder mit der eingeschränkten auswahl für DocumentFormType zurück
     *  
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function createQueryBuilderForDocumentFormTypeChoice() {
       return $this->createQueryBuilder('f')
         ->where('f.lvl >= 2')
         ->orderBy('f.slug', 'ASC')
       ;
    }

    /**
     * @see getChildren
     */
    public function children($node = null, $direct = false, $sortByField = null, $direction = 'ASC', $includeNode = false)
    {
        $q = $this->childrenQuery($node, $direct, $sortByField, $direction, true);

        $q->useQueryCache(true);
        $q->useResultCache(
            true,
            MonodiCache::DEFAULT_TTL,
            MonodiCache::CACHE_KEY_DOCTRINE_FOLDER_CHILDREN . (string)$node
        );

        return $q->getResult();
    }

    public function childrenQuery($node = null, $direct = false, $sortByField = null, $direction = 'ASC', $includeNode = false)
    {
        return $this->childrenQueryBuilder($node, $direct, $sortByField, $direction, $includeNode)
            ->leftJoin('node.documents', 'd')
            ->getQuery();
    }

    /**
     * {@inheritdoc}
     */
    public function childrenQueryBuilder($node = null, $direct = false, $sortByField = null, $direction = 'ASC', $includeNode = false)
    {
        $qb = parent::childrenQueryBuilder($node, $direct, $sortByField, $direction, $includeNode);

        $qb
            ->addSelect('PARTIAL d.{id,title,filename,rev,createdAt,editedAt}')
            ->leftJoin('node.documents', 'd')
        ;

        return $qb;
    }

    /**
     * {@inheritdoc}
     */
    public function getNodesObjectHierarchy($node = null, $direct = false, array $options = array(), $includeNode = false)
    {
        return $this
            ->getNodesHierarchyQuery($node, $direct, $options, $includeNode)
            ->getResult()
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function getNodesHierarchy($node = null, $direct = false, array $options = array(), $includeNode = false)
    {
        return $this
            ->getNodesHierarchyQuery($node, $direct, $options, $includeNode)
            ->useResultCache(
                true,
                MonodiCache::DEFAULT_TTL,
                MonodiCache::CACHE_KEY_DOCTRINE_FOLDER_NODES_ARRAY . (string) $node
            )
            ->getArrayResult()
        ;
    }

    /**
     * {@inheritDoc}
     */
    public function buildTreeArrayMapped(array $nodes, array $options = array())
    {
        $meta = $this->repoUtils->getClassMetadata();
        $nestedTree = $this->buildTreeArray($nodes);

        $childrenIndex = $this->repoUtils->getChildrenIndex();

        if (!count($nestedTree)) {
            return array();
        }

        $build = function($tree) use (&$build, &$options, $childrenIndex) {

            $output = array();
            foreach ($tree as $key => $node) {

                $output[$key] = array(
                    'id'             => $node['id'],
                    'root'           => $node['root'],
                    'path'           => $node['slug'],
                    'folders'        => array(),
                    'title'          => $node['title'],
                    'documents'      => array(),
                    'document_count' => 0,
                    'children_count' => count($node[$childrenIndex]),
                );

                if (count($node[$childrenIndex]) > 0) {
                    $output[$key]['folders'] = $build($node[$childrenIndex]);
                }

                if(isset($node['documents'])
                    && count($node['documents']) > 0
                ) {
                    foreach($node['documents'] as $dKey => $document) {
                        $output[$key]['documents'][$dKey] = array(
                            'id'         => $document['id'],
                            'filename'   => $document['filename'],
                            'rev'        => $document['rev'],
                            'title'      => $document['title'],
                            'created_at' => $document['createdAt'],
                            'edited_at'  => $document['editedAt'],
                        );
                    }
                    $output[$key]['document_count'] = count($output[$key]['documents']);

                }

            }
            return $output;
        };

        return $build($nestedTree);
    }
}
